// TodoApi/Controllers/TodoController.cs
// This file defines the API controller for managing Todo items.
// It handles incoming HTTP requests related to Todo items and returns appropriate HTTP responses.
// This controller uses ASP.NET Core's [ApiController] attribute, which enables common API behaviors.
// It interacts with the TodoItem model (TodoApi/Models/TodoItem.cs) to manage todo data.
// For this initial version, it uses a simple in-memory list as the data store.
// In a real application, this would typically be replaced with a database context (e.g., Entity Framework Core).

using Microsoft.AspNetCore.Mvc;
using TodoApi.Models; // Namespace for TodoItem model

namespace TodoApi.Controllers
{
    // [ApiController] attribute indicates that this class is an API controller.
    // It enables behaviors like automatic model validation and HTTP 400 responses for invalid models.
    [ApiController]
    // [Route("api/[controller]")] defines the base route for this controller.
    // "api" is a literal segment.
    // "[controller]" is a token that gets replaced with the controller's name (in this case, "Todo").
    // So, the base route for this controller will be "/api/todo".
    [Route("api/[controller]")]
    public class TodoController : ControllerBase // Inherits from ControllerBase, suitable for API controllers without View support.
    {
        // In-memory list to store To-do items.
        // 'static' ensures that this list is shared across all HTTP requests (and all instances of TodoController if it were not a singleton service).
        // This is suitable for demonstration but not for production as data is lost when the application stops.
        private static readonly List<TodoItem> _todoItems = new List<TodoItem>();
        private static long _nextId = 1; // Simple ID generator.

        // GET: api/todo
        // This action handles HTTP GET requests to /api/todo.
        // It returns a list of all To-do items.
        [HttpGet]
        public ActionResult<IEnumerable<TodoItem>> GetTodoItems()
        {
            // Returns all items from the in-memory list.
            // Ok() creates a 200 OK response with the list of items in the response body (serialized as JSON by default).
            return Ok(_todoItems);
        }

        // GET: api/todo/{id}
        // This action handles HTTP GET requests to /api/todo/{id}, where {id} is a route parameter.
        // It returns a specific To-do item by its ID.
        [HttpGet("{id}")]
        public ActionResult<TodoItem> GetTodoItem(long id)
        {
            // Find the To-do item in the list by its ID.
            var todoItem = _todoItems.FirstOrDefault(item => item.Id == id);

            // If the item is not found, return a 404 Not Found response.
            if (todoItem == null)
            {
                return NotFound(); // Returns an HTTP 404 status code.
            }

            // If the item is found, return it with a 200 OK response.
            return Ok(todoItem);
        }

        // POST: api/todo
        // This action handles HTTP POST requests to /api/todo.
        // It creates a new To-do item.
        // The [FromBody] attribute tells ASP.NET Core to get the TodoItem data from the request body.
        [HttpPost]
        public ActionResult<TodoItem> PostTodoItem([FromBody] TodoItem todoItem)
        {
            // Basic validation: ensure the Name property is not null or empty.
            if (string.IsNullOrWhiteSpace(todoItem.Name))
            {
                // Returns a 400 Bad Request response if the name is missing.
                // ModelState.AddModelError adds an error to the model state, which can be useful for more complex validation.
                ModelState.AddModelError("Name", "The Name field is required.");
                return BadRequest(ModelState);
            }

            // Assign a new ID to the item.
            // In a real database scenario, the ID would typically be generated by the database.
            todoItem.Id = _nextId++;

            // Add the new item to the in-memory list.
            _todoItems.Add(todoItem);

            // Return a 201 Created response.
            // CreatedAtAction is a helper method that returns a 201 response with:
            // - A "Location" header pointing to the URL of the newly created resource (using the GetTodoItem action).
            // - The newly created To-do item in the response body.
            return CreatedAtAction(nameof(GetTodoItem), new { id = todoItem.Id }, todoItem);
        }

        // PUT: api/todo/{id}
        // This action handles HTTP PUT requests to /api/todo/{id}.
        // It updates an existing To-do item.
        [HttpPut("{id}")]
        public IActionResult PutTodoItem(long id, [FromBody] TodoItem updatedTodoItem)
        {
            // Check if the ID in the URL matches the ID in the request body.
            // This is a common validation step for PUT requests.
            if (id != updatedTodoItem.Id)
            {
                return BadRequest("ID mismatch between URL and request body."); // Returns HTTP 400.
            }

            // Find the index of the existing item in the list.
            var existingItemIndex = _todoItems.FindIndex(item => item.Id == id);

            // If the item to update is not found, return a 404 Not Found response.
            if (existingItemIndex == -1)
            {
                return NotFound($"TodoItem with ID {id} not found."); // Returns HTTP 404.
            }

            // Basic validation for the updated item.
            if (string.IsNullOrWhiteSpace(updatedTodoItem.Name))
            {
                ModelState.AddModelError("Name", "The Name field cannot be empty for an update.");
                return BadRequest(ModelState);
            }

            // Update the item in the list.
            _todoItems[existingItemIndex] = updatedTodoItem;

            // Return a 204 No Content response, which is standard for successful PUT requests that don't return data.
            return NoContent();
        }

        // DELETE: api/todo/{id}
        // This action handles HTTP DELETE requests to /api/todo/{id}.
        // It deletes a To-do item.
        [HttpDelete("{id}")]
        public IActionResult DeleteTodoItem(long id)
        {
            // Find the item to delete.
            var todoItem = _todoItems.FirstOrDefault(item => item.Id == id);

            // If the item is not found, return a 404 Not Found response.
            if (todoItem == null)
            {
                return NotFound($"TodoItem with ID {id} not found."); // Returns HTTP 404.
            }

            // Remove the item from the list.
            _todoItems.Remove(todoItem);

            // Return a 204 No Content response, indicating successful deletion without returning data.
            // Alternatively, some APIs return 200 OK with the deleted item or a confirmation message.
            return NoContent();
        }
    }
}
